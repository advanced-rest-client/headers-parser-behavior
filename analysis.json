{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ArcBehaviors",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "headers-parser-behavior.html",
        "start": {
          "line": 22,
          "column": 2
        },
        "end": {
          "line": 22,
          "column": 27
        }
      },
      "mixins": [
        {
          "description": "Headers parser behavior to be impplemented with elements that needs to parse headers data.\n\nIn most cases function defined in this behavior can work with the headers defined as a string,\narray of objects (name, value keys) or as Header object.\n\nTo calculate errors properly, set `isPayload` property when current request can carry a\npayload.",
          "summary": "",
          "path": "headers-parser-behavior.html",
          "properties": [
            {
              "name": "isPayload",
              "type": "boolean | null | undefined",
              "description": "Set to true when the request can carry a payload.\nIt's required for calculating headers errors.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 56,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "filterHeaders",
              "description": "Filter array of headers and return not duplicated array of the same headers.\nDuplicated headers should be appended to already found one using coma separator.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headers",
                  "type": "Array",
                  "description": "Headers array to filter. All objects in headers array must have \"name\"\n               and \"value\" keys."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "An array of filtered headers."
              }
            },
            {
              "name": "headersToString",
              "description": "Parse headers array to Raw HTTP headers string.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 96,
                  "column": 4
                },
                "end": {
                  "line": 110,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headersArray",
                  "type": "(Array | String | Headers)",
                  "description": "List of objects with \"name\" and \"value\"\nproperties."
                }
              ],
              "return": {
                "type": "String",
                "desc": "A HTTP representation of the headers."
              }
            },
            {
              "name": "headerItemToString",
              "description": "Transforms a header model item to a string.\nArray values are supported.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "header",
                  "type": "Object",
                  "description": "Object with name and value."
                }
              ],
              "return": {
                "type": "String",
                "desc": "Generated headers line"
              }
            },
            {
              "name": "headersToJSON",
              "description": "Parse HTTP headers input from string to array of objects containing `name` and `value`\nproperties.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 4
                },
                "end": {
                  "line": 147,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headers",
                  "type": "(String | Headers)",
                  "description": "Raw HTTP headers input or Headers object"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "The array of objects where properties are `name` as a header\nname and `value` as a header content."
              }
            },
            {
              "name": "_headersStringToJSON",
              "description": "Parse headers string to array of objects.\nSee `#toJSON` for more info.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 4
                },
                "end": {
                  "line": 189,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headersString",
                  "type": "String"
                }
              ],
              "return": {
                "type": "Array.<Object>"
              }
            },
            {
              "name": "_hedersToJSON",
              "description": "Parse Headers object to array of objects.\nSee `#toJSON` for more info.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 4
                },
                "end": {
                  "line": 221,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headers",
                  "type": "(Headers | Object)"
                }
              ],
              "return": {
                "type": "Array.<Object>"
              }
            },
            {
              "name": "_oldCombine",
              "description": "Helper method for old system: combine headers list with encoding value.\nNote that this function will update the original array.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 231,
                  "column": 4
                },
                "end": {
                  "line": 245,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headers",
                  "type": "Array",
                  "description": "An array of headers"
                },
                {
                  "name": "encoding",
                  "type": "String",
                  "description": "An encoding string from the old request."
                }
              ],
              "return": {
                "type": "Boolean",
                "desc": "True if encoding has been added to the array."
              }
            },
            {
              "name": "getContentType",
              "description": "Get the Content-Type value from the headers.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 253,
                  "column": 4
                },
                "end": {
                  "line": 274,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headers",
                  "type": "(Array | String)",
                  "description": "Either HTTP headers string or list of headers."
                }
              ],
              "return": {
                "type": "(String | null)",
                "desc": "A content-type header value or null if not found"
              }
            },
            {
              "name": "replaceHeaderValue",
              "description": "Replace value for given header in the headers list.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 285,
                  "column": 4
                },
                "end": {
                  "line": 319,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headers",
                  "type": "(Array | String | Object)",
                  "description": "A headers object. Can be string, array of objects or\nHeaders object."
                },
                {
                  "name": "name",
                  "type": "String",
                  "description": "Header name to be replaced."
                },
                {
                  "name": "value",
                  "type": "String",
                  "description": "Header value to be repleced."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Updated headers."
              }
            },
            {
              "name": "getHeaderError",
              "description": "Get error message for given header string.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 325,
                  "column": 4
                },
                "end": {
                  "line": 359,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "(Header | Array | String)",
                  "description": "A headers to check."
                }
              ],
              "return": {
                "type": "?String",
                "desc": "An error message or null if the headers are valid."
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 0
            },
            "end": {
              "line": 362,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ArcBehaviors.HeadersParserBehavior",
          "attributes": [
            {
              "name": "is-payload",
              "description": "Set to true when the request can carry a payload.\nIt's required for calculating headers errors.",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 56,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ]
}
